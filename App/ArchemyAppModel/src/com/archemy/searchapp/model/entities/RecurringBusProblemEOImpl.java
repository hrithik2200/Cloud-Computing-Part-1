package com.archemy.searchapp.model.entities;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Dec 18 17:35:18 EST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RecurringBusProblemEOImpl extends AutoIncrementEntityImpl {
  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
   */
  public enum AttributesEnum {
    BusinessProblem {
      public Object get(RecurringBusProblemEOImpl obj) {
        return obj.getBusinessProblem();
      }

      public void put(RecurringBusProblemEOImpl obj, Object value) {
        obj.setBusinessProblem((String)value);
      }
    }
    ,
    Id {
      public Object get(RecurringBusProblemEOImpl obj) {
        return obj.getId();
      }

      public void put(RecurringBusProblemEOImpl obj, Object value) {
        obj.setId((Integer)value);
      }
    }
    ,
    Context {
      public Object get(RecurringBusProblemEOImpl obj) {
        return obj.getContext();
      }

      public void put(RecurringBusProblemEOImpl obj, Object value) {
        obj.setContext((String)value);
      }
    }
    ,
    Description {
      public Object get(RecurringBusProblemEOImpl obj) {
        return obj.getDescription();
      }

      public void put(RecurringBusProblemEOImpl obj, Object value) {
        obj.setDescription((String)value);
      }
    }
    ,
    Type {
      public Object get(RecurringBusProblemEOImpl obj) {
        return obj.getType();
      }

      public void put(RecurringBusProblemEOImpl obj, Object value) {
        obj.setType((String)value);
      }
    }
    ;
    private static AttributesEnum[] vals = null;
    private static int firstIndex = 0;

    public abstract Object get(RecurringBusProblemEOImpl object);

    public abstract void put(RecurringBusProblemEOImpl object, Object value);

    public int index() {
      return AttributesEnum.firstIndex() + ordinal();
    }

    public static int firstIndex() {
      return firstIndex;
    }

    public static int count() {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    public static AttributesEnum[] staticValues() {
      if (vals == null) {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }


  public static final int BUSINESSPROBLEM = AttributesEnum.BusinessProblem.index();
  public static final int ID = AttributesEnum.Id.index();
  public static final int CONTEXT = AttributesEnum.Context.index();
  public static final int DESCRIPTION = AttributesEnum.Description.index();
  public static final int TYPE = AttributesEnum.Type.index();

  /**
   * This is the default constructor (do not remove).
   */
  public RecurringBusProblemEOImpl() {
  }


  /**
   * @return the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject() {
    return EntityDefImpl.findDefObject("com.archemy.searchapp.model.entities.RecurringBusProblemEO");
  }

  /**
   * Gets the attribute value for BusinessProblem, using the alias name BusinessProblem.
   * @return the value of BusinessProblem
   */
  public String getBusinessProblem() {
    return (String)getAttributeInternal(BUSINESSPROBLEM);
  }

  /**
   * Sets <code>value</code> as the attribute value for BusinessProblem.
   * @param value value to set the BusinessProblem
   */
  public void setBusinessProblem(String value) {
    setAttributeInternal(BUSINESSPROBLEM, value);
  }

  /**
   * Gets the attribute value for Id, using the alias name Id.
   * @return the value of Id
   */
  public Integer getId() {
    return (Integer)getAttributeInternal(ID);
  }

  /**
   * Sets <code>value</code> as the attribute value for Id.
   * @param value value to set the Id
   */
  public void setId(Integer value) {
    setAttributeInternal(ID, value);
  }

  /**
   * Gets the attribute value for Context, using the alias name Context.
   * @return the value of Context
   */
  public String getContext() {
    return (String)getAttributeInternal(CONTEXT);
  }

  /**
   * Sets <code>value</code> as the attribute value for Context.
   * @param value value to set the Context
   */
  public void setContext(String value) {
    setAttributeInternal(CONTEXT, value);
  }

  /**
   * Gets the attribute value for Description, using the alias name Description.
   * @return the value of Description
   */
  public String getDescription() {
    return (String)getAttributeInternal(DESCRIPTION);
  }

  /**
   * Sets <code>value</code> as the attribute value for Description.
   * @param value value to set the Description
   */
  public void setDescription(String value) {
    setAttributeInternal(DESCRIPTION, value);
  }

  /**
   * Gets the attribute value for Type, using the alias name Type.
   * @return the value of Type
   */
  public String getType() {
    return (String)getAttributeInternal(TYPE);
  }

  /**
   * Sets <code>value</code> as the attribute value for Type.
   * @param value value to set the Type
   */
  public void setType(String value) {
    setAttributeInternal(TYPE, value);
  }

  /**
   * getAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param attrDef the attribute

   * @return the attribute value
   * @throws Exception
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
      return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

  /**
   * setAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param value the value to assign to the attribute
   * @param attrDef the attribute

   * @throws Exception
   */
  protected void setAttrInvokeAccessor(int index, Object value,
                                       AttributeDefImpl attrDef) throws Exception {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
      AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
      return;
    }
    super.setAttrInvokeAccessor(index, value, attrDef);
  }

  /**
   * @param id key constituent

   * @return a Key object based on given key constituents.
   */
  public static Key createPrimaryKey(Integer id) {
    return new Key(new Object[]{id});
  }


}
