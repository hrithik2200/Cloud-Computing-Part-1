package com.archemy.searchapp.model.am;


import com.archemy.catalog.security.util.FortressSecurityUtil;
import com.archemy.searchapp.model.am.common.ArchemySearchAM;
import com.archemy.searchapp.model.lookups.AreaChildLookupVOImpl;
import com.archemy.searchapp.model.lookups.AreaParentIdLookupVOImpl;
import com.archemy.searchapp.model.lookups.BusinessProblemLookupVOImpl;
import com.archemy.searchapp.model.lookups.DimensionsFilteredByDomainVOImpl;
import com.archemy.searchapp.model.lookups.DomainLookupVOImpl;
import com.archemy.searchapp.model.queries.CustomerInfoVOImpl;
import com.archemy.searchapp.model.queries.CustomerInfoVORowImpl;
import com.archemy.searchapp.model.queries.KADDimensionsAreaTempVOImpl;
import com.archemy.searchapp.model.queries.KADDimensionsAreaTempVORowImpl;
import com.archemy.searchapp.model.queries.KadDimensionsAreaVOImpl;
import com.archemy.searchapp.model.queries.KadSearchTransVOImpl;
import com.archemy.searchapp.model.queries.KadSearchTransVORowImpl;
import com.archemy.searchapp.model.queries.KadTempVOImpl;
import com.archemy.searchapp.model.queries.KadTempVORowImpl;
import com.archemy.searchapp.model.queries.KadsVOImpl;
import com.archemy.searchapp.model.queries.PwPolicyTrVOImpl;
import com.archemy.searchapp.model.queries.SummaryUsageStatisticsVOImpl;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.directory.fortress.core.AccessMgr;
import org.apache.directory.fortress.core.SecurityException;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 10 19:53:32 EST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ArchemySearchAMImpl extends ApplicationModuleImpl implements ArchemySearchAM {

  private static final ADFLogger logger = ADFLogger.createADFLogger(ArchemySearchAMImpl.class);
 

  /**
   * This is the default constructor (do not remove).
   */
  public ArchemySearchAMImpl() {
  }

  public void addCustomerRowIfNotExists(String custId) {
    CustomerInfoVOImpl vo = this.getCustomerInfoVO1();
    vo.setbUserId(custId);
    if (!vo.hasNext()) {
      CustomerInfoVORowImpl row = (CustomerInfoVORowImpl)vo.createRow();
      row.setUserId(custId);
      vo.insertRow(row);
    }
    this.getDBTransaction().commit();
  }

  /**
   * Inserts row into temp viewobject
   */
  public void insertKADTempRow() {
    KADDimensionsAreaTempVOImpl vo= this.getKADDimensionsAreaTempVO1();
    String uuid=UUID.randomUUID().toString();
    NameValuePairs nvp=new NameValuePairs();
    nvp.setAttribute("UUID", uuid);
    Row row=vo.createAndInitRow(nvp);
    vo.insertRow(row);
  }

  /**
   * This is used to change the password for the user
   */
  public void changePasswordForUser(String userId, String password, String newPassword) {
    FortressSecurityUtil ops = new FortressSecurityUtil();
    AccessMgr acMgr = ops.createAndGetAccessMgr();
    try {
      acMgr.authenticate(userId, password.toCharArray());
    } catch (SecurityException e) {
      throw new JboException(e);
    }
    ops.resetPasswordForUser(userId, newPassword);
  }

  /**
   * Increments the hit count
   */
  public Integer incrementHitCount(int kadId) {
    Integer incrementedHitCount = 0;
    DBTransaction dbt = this.getDBTransaction();
    PreparedStatement st = null;
    try {
      st =
          dbt.createPreparedStatement("Update kads set kad_hit_counter=kad_hit_counter+1 where kad_id=?",
                                      0);
      st.setInt(1, kadId);
      st.executeUpdate();
    } catch (SQLException e) {

    } finally {
      if (st != null) {
        try {
          st.close();
        } catch (SQLException e) {

        }
      }
    }
    dbt.commit();
    dbt = this.getDBTransaction();
    ResultSet rs = null;
    try {
      st = dbt.createPreparedStatement("select kad_hit_counter from kads where kad_id=?", 0);
      st.setInt(1, kadId);
      rs = st.executeQuery();
      rs.next();
      incrementedHitCount = rs.getInt(1);

    } catch (SQLException e) {

    } finally {
      if (st != null) {
        try {
          st.close();
        } catch (SQLException e) {

        }
      }
    }

    return incrementedHitCount;
  }

  /**
   * Searches the database and then ranks the results
   * O(n^2) due to multiple criteria check and scoring passes.
   */
  public void searchAndRankKad(Integer businessProblem) {
    KADDimensionsAreaTempVOImpl kadSearchCriteriaVO = getKADDimensionsAreaTempVO1();
    RowSetIterator rsIt = null;
    Map<Integer, KadSearchTransVORowImpl> scoreMap =
      new HashMap<Integer, KadSearchTransVORowImpl>();
    StringBuilder query = new StringBuilder();
    query.append(" select k.kad_id, d.domain_name, k.kad_link, " +
                 " kada.dimension_id, kada.AREA_ID,kada.AREA_PARENT_ID, k.kad_link_public, k.kad_name,k.kad_hit_counter" +
                 " from kad_dimensions_area kada, kads k, domains d " +
                 " where kada.KAD_ID=k.KAD_ID and k.DOMAIN_ID=d.DOMAIN_ID ");
    if(businessProblem!=null){
      query.append(" and k.RECURRING_BUS_PROBLEM_ID = "+businessProblem);
      }
    try {
      query.append(" and (");
      rsIt = kadSearchCriteriaVO.createRowSetIterator(null);
      while (rsIt.hasNext()) {
        KADDimensionsAreaTempVORowImpl row = (KADDimensionsAreaTempVORowImpl)rsIt.next();
        query.append(" ( kada.DIMENSION_ID = "+row.getDimensionId());
        if (row.getAreaId() != null) {
          query.append(" and kada.AREA_PARENT_ID = "+row.getAreaId());
        }
        if (row.getAreaChildId() != null) {
          query.append(" and kada.AREA_ID = "+row.getAreaChildId());
        }
        query.append(" ) or ");
      }
    } finally {
      if (rsIt != null) {
        rsIt.closeRowSetIterator();
      }
    }
    query.append( " 1=0 ) ");
    Statement statement = this.getDBTransaction().createStatement(10);
    ResultSet rs = null;
    KadSearchTransVOImpl vo = getKadSearchTransVO1();
    vo.executeEmptyRowSet();
    vo.clearCache();
    try {
      rs = statement.executeQuery(query.toString());
      logger.info("Executing " + query.toString());
      while (rs.next()) {
        if (!scoreMap.containsKey(new Integer(rs.getInt(1)))) {
          KadSearchTransVORowImpl row = (KadSearchTransVORowImpl)vo.createRow();
          row.setKadID(rs.getInt("kad_id"));
          row.setKadName(rs.getString("kad_name"));
          row.setDomainName(rs.getString("domain_name"));
          row.setKadLink(rs.getString("kad_link"));
          row.setKadLinkPublic(rs.getString("kad_link_public"));
          row.setHitCounter(new Integer(rs.getInt("kad_hit_counter")));
          int score =
            calculateScore(rs.getInt("dimension_id"), rs.getInt("AREA_ID"), rs.getInt("AREA_PARENT_ID"));
          row.setScore(new Integer(score));
          scoreMap.put(new Integer(rs.getInt(1)), row);
        } else {
          KadSearchTransVORowImpl row = scoreMap.get(rs.getInt(1));
          int score =
            calculateScore(rs.getInt("dimension_id"), rs.getInt("AREA_ID"), rs.getInt("AREA_PARENT_ID"));
          row.setScore(row.getScore() + score);
        }
      }
    } catch (SQLException e) {
      logger.severe(" An error occured while executing statement " + query.toString(), e);
    } finally {
      if (rs != null) {
        try {
          rs.close();
        } catch (SQLException e) {
        }
      }
      if(statement!=null){
        try{
        statement.close();
        }catch(SQLException e){
          }
        }
    }

    for (Integer id : scoreMap.keySet()) {
      vo.insertRow(scoreMap.get(id));
    }
    vo.setSortBy("Score desc");
    vo.setQueryMode(ViewObject.QUERY_MODE_SCAN_VIEW_ROWS);
    vo.executeQuery();
  }

  private int calculateScore(Integer dimensionId, Integer childAreaId, Integer parentAreaId) {
    KADDimensionsAreaTempVOImpl kadSearchCriteriaVO = getKADDimensionsAreaTempVO1();
    int score = 0;
    RowSetIterator rsIt = null;
    try {
      rsIt = kadSearchCriteriaVO.createRowSetIterator(null);
      while (rsIt.hasNext()) {
        KADDimensionsAreaTempVORowImpl row = (KADDimensionsAreaTempVORowImpl)rsIt.next();
        if (row.getDimensionId().equals(dimensionId)) {
          if (row.getAreaId() != null) {
            if (parentAreaId != null && parentAreaId.equals(row.getAreaId())) {
              if (row.getAreaChildId() != null) {
                if (childAreaId != null && childAreaId.equals(row.getAreaChildId())) {
                  score = score + row.getWeight();
                }
              } else {
                score = score + row.getWeight();
              }
            }
          } else {
            score = score + row.getWeight();
          }
        }
      }
    } finally {
      if (rsIt != null) {
        rsIt.closeRowSetIterator();
      }
    }
    return score;
  }

  public void addKAD(Integer domainId) {
    KadTempVOImpl tempVOImpl = getKadTempVO1();
    KadTempVORowImpl currentRow = (KadTempVORowImpl)tempVOImpl.getCurrentRow();
    String kadName = currentRow.getKadName();
    String kadLink = currentRow.getKadLink();
    String kadPublicLink = currentRow.getKadPublicLink();
    Integer busProblem = currentRow.getBusiness_problem();
    Integer kadId = null;
    DBTransaction transaction = this.getDBTransaction();
    CallableStatement cs =
      transaction.createCallableStatement("{ call insert_into_kad(?,?,?,?,?,?)}", 0);
    try {
      cs.setString(1, kadName);
      cs.setString(2, kadLink);
      cs.setString(3, kadPublicLink);
      cs.setInt(4, domainId);
      cs.setInt(5, busProblem);
      cs.registerOutParameter(6, Types.INTEGER);
      cs.execute();
      kadId = cs.getInt(6);
    } catch (SQLException e) {
      throw new JboException(e);
    } finally {
      try {
        if (cs != null) {
          cs.close();
        }
      } catch (SQLException e) {
        throw new JboException(e);
      }

    }
    KADDimensionsAreaTempVOImpl kadSearchCriteriaVO = getKADDimensionsAreaTempVO1();
    RowSetIterator rsIt = null;
    try {
      rsIt = kadSearchCriteriaVO.createRowSetIterator(null);
      while (rsIt.hasNext()) {
        KADDimensionsAreaTempVORowImpl tempRow = (KADDimensionsAreaTempVORowImpl)rsIt.next();
        createKadDimensionsRow(kadId, tempRow.getAreaId(), tempRow.getAreaChildId(),
                               tempRow.getDimensionId(), transaction);
      }
    } finally {
      if (rsIt != null) {
        rsIt.closeRowSetIterator();
      }
    }
    try {
      transaction.commit();
    } catch (Exception e) {
      transaction.rollback();
    }
  }

  private void createKadDimensionsRow(Integer kadId, Integer areaId, Integer areaChildId,
                                      Integer dimensionId, DBTransaction transaction) {
    CallableStatement cs =
      transaction.createCallableStatement("{ call insert_into_kad_dim_area(?,?,?,?)}", 0);
    try {
      cs.setInt(1, kadId);
      if (areaId != null) {
        cs.setInt(2, areaId);
      } else {
        cs.setNull(2, Types.INTEGER);
      }
      if (areaChildId != null) {
        cs.setInt(3, areaChildId);
      } else {
        cs.setNull(3, Types.INTEGER);
      }
      cs.setInt(4, dimensionId);
      cs.execute();
    } catch (SQLException e) {
      throw new JboException(e);
    } finally {
      try {
        if (cs != null) {
          cs.close();
        }
      } catch (SQLException e) {
        throw new JboException(e);
      }

    }
  }

  public void executeEmptyRowSet(String voName) {
    ViewObject vo = this.findViewObject(voName);
    vo.executeEmptyRowSet();
  }

  public void removeKAD(Integer kadId) {
    KadsVOImpl kadVO = this.getKadsVO2();
    Key key = new Key(new Object[] { kadId });
    Row row = kadVO.findByKey(key, 1)[0];
    if (row != null) {
      row.remove();
    }
    this.getDBTransaction().commit();
  }

  /**
   * Container's getter for ArchemySearchVO1.
   * @return ArchemySearchVO1
   */
  public ViewObjectImpl getArchemySearchVO1() {
    return (ViewObjectImpl)findViewObject("ArchemySearchVO1");
  }

  /**
   * Container's getter for AreasVO1.
   * @return AreasVO1
   */
  public ViewObjectImpl getAreasVO1() {
    return (ViewObjectImpl)findViewObject("AreasVO1");
  }

  /**
   * Container's getter for DimensionsVO1.
   * @return DimensionsVO1
   */
  public ViewObjectImpl getDimensionsVO1() {
    return (ViewObjectImpl)findViewObject("DimensionsVO1");
  }

  /**
   * Container's getter for DomainsVO1.
   * @return DomainsVO1
   */
  public ViewObjectImpl getDomainsVO1() {
    return (ViewObjectImpl)findViewObject("DomainsVO1");
  }

  /**
   * Container's getter for IadsVO1.
   * @return IadsVO1
   */
  public ViewObjectImpl getIadsVO1() {
    return (ViewObjectImpl)findViewObject("IadsVO1");
  }

  /**
   * Container's getter for KadsVO1.
   * @return KadsVO1
   */
  public KadsVOImpl getKadsVO1() {
    return (KadsVOImpl)findViewObject("KadsVO1");
  }

  /**
   * Container's getter for KadDimensionsAreaVO1.
   * @return KadDimensionsAreaVO1
   */
  public KadDimensionsAreaVOImpl getKadDimensionsAreaVO1() {
    return (KadDimensionsAreaVOImpl)findViewObject("KadDimensionsAreaVO1");
  }

  /**
   * Container's getter for KADDimensionsAreaTempVO1.
   * @return KADDimensionsAreaTempVO1
   */
  public KADDimensionsAreaTempVOImpl getKADDimensionsAreaTempVO1() {
    return (KADDimensionsAreaTempVOImpl)findViewObject("KADDimensionsAreaTempVO1");
  }

  /**
   * Container's getter for AreaParentIdLookupVO1.
   * @return AreaParentIdLookupVO1
   */
  public AreaParentIdLookupVOImpl getAreaParentIdLookupVO1() {
    return (AreaParentIdLookupVOImpl)findViewObject("AreaParentIdLookupVO1");
  }

  /**
   * Container's getter for AreaChildLookupVO1.
   * @return AreaChildLookupVO1
   */
  public AreaChildLookupVOImpl getAreaChildLookupVO1() {
    return (AreaChildLookupVOImpl)findViewObject("AreaChildLookupVO1");
  }

  /**
   * Container's getter for DimensionsFilteredByDomainVO1.
   * @return DimensionsFilteredByDomainVO1
   */
  public DimensionsFilteredByDomainVOImpl getDimensionsFilteredByDomainVO1() {
    return (DimensionsFilteredByDomainVOImpl)findViewObject("DimensionsFilteredByDomainVO1");
  }

  /**
   * Container's getter for DomainLookupVO1.
   * @return DomainLookupVO1
   */
  public DomainLookupVOImpl getDomainLookupVO1() {
    return (DomainLookupVOImpl)findViewObject("DomainLookupVO1");
  }

  /**
   * Container's getter for KadSearchTransVO1.
   * @return KadSearchTransVO1
   */
  public KadSearchTransVOImpl getKadSearchTransVO1() {
    return (KadSearchTransVOImpl)findViewObject("KadSearchTransVO1");
  }


  /**
   * Container's getter for KadTempVO1.
   * @return KadTempVO1
   */
  public KadTempVOImpl getKadTempVO1() {
    return (KadTempVOImpl)findViewObject("KadTempVO1");
  }

  /**
   * Container's getter for KadsVO2.
   * @return KadsVO2
   */
  public KadsVOImpl getKadsVO2() {
    return (KadsVOImpl)findViewObject("KadsVO2");
  }

  /**
   * Container's getter for DomainsVO2.
   * @return DomainsVO2
   */
  public ViewObjectImpl getDomainsVO2() {
    return (ViewObjectImpl)findViewObject("DomainsVO2");
  }

  /**
   * Container's getter for KadsVO3.
   * @return KadsVO3
   */
  public KadsVOImpl getKadsVO3() {
    return (KadsVOImpl)findViewObject("KadsVO3");
  }

  /**
   * Container's getter for DimensionsVO2.
   * @return DimensionsVO2
   */
  public ViewObjectImpl getDimensionsVO2() {
    return (ViewObjectImpl)findViewObject("DimensionsVO2");
  }

  /**
   * Container's getter for AreasVO2.
   * @return AreasVO2
   */
  public ViewObjectImpl getAreasVO2() {
    return (ViewObjectImpl)findViewObject("AreasVO2");
  }


  /**
   * Container's getter for BusinessProblemLookupVO1.
   * @return BusinessProblemLookupVO1
   */
  public BusinessProblemLookupVOImpl getBusinessProblemLookupVO1() {
    return (BusinessProblemLookupVOImpl)findViewObject("BusinessProblemLookupVO1");
  }

  /**
   * Container's getter for KadRegistrationVO1.
   * @return KadRegistrationVO1
   */
  public ViewObjectImpl getKadRegistrationVO1() {
    return (ViewObjectImpl)findViewObject("KadRegistrationVO1");
  }

  /**
   * Container's getter for SummaryUsageStatisticsVO1.
   * @return SummaryUsageStatisticsVO1
   */
  public SummaryUsageStatisticsVOImpl getSummaryUsageStatisticsVO1() {
    return (SummaryUsageStatisticsVOImpl)findViewObject("SummaryUsageStatisticsVO1");
  }

  /**
   * Container's getter for UsageStatisticsVO1.
   * @return UsageStatisticsVO1
   */
  public ViewObjectImpl getUsageStatisticsVO1() {
    return (ViewObjectImpl)findViewObject("UsageStatisticsVO1");
  }

  /**
   * Container's getter for CustomerInfoVO1.
   * @return CustomerInfoVO1
   */
  public CustomerInfoVOImpl getCustomerInfoVO1() {
    return (CustomerInfoVOImpl)findViewObject("CustomerInfoVO1");
  }

  /**
   * Container's getter for PwPolicyTrVO1.
   * @return PwPolicyTrVO1
   */
  public PwPolicyTrVOImpl getPwPolicyTrVO1() {
    return (PwPolicyTrVOImpl)findViewObject("PwPolicyTrVO1");
  }

  /**
   * Container's getter for PwPolicyTrVO2.
   * @return PwPolicyTrVO2
   */
  public PwPolicyTrVOImpl getPwPolicyTrVO2() {
    return (PwPolicyTrVOImpl)findViewObject("PwPolicyTrVO2");
  }

  /**
   * Container's getter for RecurringBusProblemVO1.
   * @return RecurringBusProblemVO1
   */
  public ViewObjectImpl getRecurringBusProblemVO1() {
    return (ViewObjectImpl)findViewObject("RecurringBusProblemVO1");
  }

  /**
   * Container's getter for RecurringBusProblemVO2.
   * @return RecurringBusProblemVO2
   */
  public ViewObjectImpl getRecurringBusProblemVO2() {
    return (ViewObjectImpl)findViewObject("RecurringBusProblemVO2");
  }


  /**
   * Container's getter for AreaParentIdLookupVO2.
   * @return AreaParentIdLookupVO2
   */
  public AreaParentIdLookupVOImpl getAreaParentIdLookupVO2() {
    return (AreaParentIdLookupVOImpl)findViewObject("AreaParentIdLookupVO2");
  }

  /**
   * Container's getter for CustomerInfoAllVO1.
   * @return CustomerInfoAllVO1
   */
  public ViewObjectImpl getCustomerInfoAllVO1() {
    return (ViewObjectImpl)findViewObject("CustomerInfoAllVO1");
  }
}
