package com.archemy.searchapp.model.queries;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 15 21:18:14 EST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CustomerInfoVORowImpl extends ViewRowImpl {
  public static final int ENTITY_CUSTOMERINFOEO = 0;

  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
   */
  public enum AttributesEnum {
    CustomerName {
      public Object get(CustomerInfoVORowImpl obj) {
        return obj.getCustomerName();
      }

      public void put(CustomerInfoVORowImpl obj, Object value) {
        obj.setCustomerName((String)value);
      }
    }
    ,
    Industry {
      public Object get(CustomerInfoVORowImpl obj) {
        return obj.getIndustry();
      }

      public void put(CustomerInfoVORowImpl obj, Object value) {
        obj.setIndustry((String)value);
      }
    }
    ,
    UserId {
      public Object get(CustomerInfoVORowImpl obj) {
        return obj.getUserId();
      }

      public void put(CustomerInfoVORowImpl obj, Object value) {
        obj.setUserId((String)value);
      }
    }
    ;
    private static AttributesEnum[] vals = null;
    private static int firstIndex = 0;

    public abstract Object get(CustomerInfoVORowImpl object);

    public abstract void put(CustomerInfoVORowImpl object, Object value);

    public int index() {
      return AttributesEnum.firstIndex() + ordinal();
    }

    public static int firstIndex() {
      return firstIndex;
    }

    public static int count() {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    public static AttributesEnum[] staticValues() {
      if (vals == null) {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }
  public static final int CUSTOMERNAME = AttributesEnum.CustomerName.index();
  public static final int INDUSTRY = AttributesEnum.Industry.index();
  public static final int USERID = AttributesEnum.UserId.index();

  /**
   * This is the default constructor (do not remove).
   */
  public CustomerInfoVORowImpl() {
  }

  /**
   * Gets CustomerInfoEO entity object.
   * @return the CustomerInfoEO
   */
  public EntityImpl getCustomerInfoEO() {
    return (EntityImpl)getEntity(ENTITY_CUSTOMERINFOEO);
  }

  /**
   * Gets the attribute value for CUSTOMER_NAME using the alias name CustomerName.
   * @return the CUSTOMER_NAME
   */
  public String getCustomerName() {
    return (String) getAttributeInternal(CUSTOMERNAME);
  }

  /**
   * Sets <code>value</code> as attribute value for CUSTOMER_NAME using the alias name CustomerName.
   * @param value value to set the CUSTOMER_NAME
   */
  public void setCustomerName(String value) {
    setAttributeInternal(CUSTOMERNAME, value);
  }

  /**
   * Gets the attribute value for INDUSTRY using the alias name Industry.
   * @return the INDUSTRY
   */
  public String getIndustry() {
    return (String) getAttributeInternal(INDUSTRY);
  }

  /**
   * Sets <code>value</code> as attribute value for INDUSTRY using the alias name Industry.
   * @param value value to set the INDUSTRY
   */
  public void setIndustry(String value) {
    setAttributeInternal(INDUSTRY, value);
  }

  /**
   * Gets the attribute value for USER_ID using the alias name UserId.
   * @return the USER_ID
   */
  public String getUserId() {
    return (String) getAttributeInternal(USERID);
  }

  /**
   * Sets <code>value</code> as attribute value for USER_ID using the alias name UserId.
   * @param value value to set the USER_ID
   */
  public void setUserId(String value) {
    setAttributeInternal(USERID, value);
  }

  /**
   * getAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param attrDef the attribute

   * @return the attribute value
   * @throws Exception
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
      return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

  /**
   * setAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param value the value to assign to the attribute
   * @param attrDef the attribute

   * @throws Exception
   */
  protected void setAttrInvokeAccessor(int index, Object value,
                                       AttributeDefImpl attrDef) throws Exception {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
      AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
      return;
    }
    super.setAttrInvokeAccessor(index, value, attrDef);
  }
}
