package com.archemy.searchapp.model.queries;


import com.archemy.catalog.security.util.FortressSecurityUtil;

import java.sql.ResultSet;

import java.util.Iterator;
import java.util.List;

import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.apache.directory.fortress.core.model.PwPolicy;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 11 12:27:14 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PwPolicyTrVOImpl extends ViewObjectImpl {
    protected Iterator<PwPolicy> pwPolicyIterator;
    int resultSize;
    /**
     * This is the default constructor (do not remove).
     */
    public PwPolicyTrVOImpl() {
    }
    protected void create() {
       getViewDef().setQuery(null);
        getViewDef().setSelectClause(null);
        setQuery(null);
        setManageRowsByKey(true);
    }
    private boolean inExecuteEmptyRowSet = false;

      @Override
      public void executeEmptyRowSet() {
          try {
              inExecuteEmptyRowSet = true;
              super.executeEmptyRowSet();
          }
          finally {
              inExecuteEmptyRowSet = false;
          }
          
      }   
    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    protected void executeQueryForCollection(Object qc, Object[] params,
                                             int noUserParams) {
        if(!inExecuteEmptyRowSet){
        List<PwPolicy> searchedPolicies= fetchDataForCriteria(getbPolicyName());
        if(searchedPolicies!=null){
            setPwPolicyIterator(searchedPolicies.iterator());
            setUserDataForCollection(qc,searchedPolicies);
                resultSize=searchedPolicies.size();
            }
        else{
            resultSize=0;
            }
        }
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    protected boolean hasNextForCollection(Object qc) {
        if ( (getPwPolicyIterator()!=null) && (getPwPolicyIterator().hasNext())){
          return true;
        }
        else {
           setFetchCompleteForCollection(qc, true);
           return false;
        }
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    protected ViewRowImpl createRowFromResultSet(Object qc,
                                                 ResultSet resultSet) {
        if(getPwPolicyIterator() != null && getPwPolicyIterator().hasNext())
        {
            ViewRowImpl row= createNewRowForCollection(qc); 
            PwPolicy pwPolicy=getPwPolicyIterator().next();
            populateAttributeForRow(row, 0, pwPolicy.getAllowUserChange());
            populateAttributeForRow(row, 1, pwPolicy.getExpireWarning());
            if(pwPolicy.getFailureCountInterval()!=null){
            populateAttributeForRow(row, 2, pwPolicy.getFailureCountInterval().intValue());
            }
            if(pwPolicy.getGraceLoginLimit()!=null){
            populateAttributeForRow(row, 3, pwPolicy.getGraceLoginLimit().intValue());
            }
            if(pwPolicy.getInHistory()!=null){
            populateAttributeForRow(row, 4, pwPolicy.getInHistory().intValue());
            }
            populateAttributeForRow(row, 5, pwPolicy.getLockout());
            populateAttributeForRow(row, 6 , pwPolicy.getLockoutDuration());
            populateAttributeForRow(row, 7, pwPolicy.getMaxAge());
            if(pwPolicy.getMaxFailure()!=null){
            populateAttributeForRow(row, 8, pwPolicy.getMaxFailure().intValue());
            }
            populateAttributeForRow(row, 9, pwPolicy.getMinAge());
            if(pwPolicy.getMinLength()!=null){
            populateAttributeForRow(row, 10, pwPolicy.getMinLength().intValue());
            }
            populateAttributeForRow(row, 11, pwPolicy.getMustChange());
            populateAttributeForRow(row, 12, pwPolicy.getName());
            populateAttributeForRow(row, 13, pwPolicy.getSafeModify());
            populateAttributeForRow(row, 14, "OLD");
            return row;
        }
        return null;
        
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
//        if(resultSize!=0)
//        {
//            return resultSize;
//        }
//        else{
            return viewRowSet.getRowCount();
//            }
    }

    /**
     * Returns the variable value for bPolicyName.
     * @return variable value for bPolicyName
     */
    public String getbPolicyName() {
        return (String)ensureVariableManager().getVariableValue("bPolicyName");
    }

    /**
     * Sets <code>value</code> for variable bPolicyName.
     * @param value value to bind as bPolicyName
     */
    public void setbPolicyName(String value) {
        ensureVariableManager().setVariableValue("bPolicyName", value);
    }

    public void setPwPolicyIterator(Iterator<PwPolicy> pwPolicyIterator) {
        this.pwPolicyIterator = pwPolicyIterator;
    }

    public Iterator<PwPolicy> getPwPolicyIterator() {
        return pwPolicyIterator;
    }

    /**
     * This method is used to fetch the policy names from openLdap
     * @param policyName searches by policy name
     * @return
     */
    private List<PwPolicy> fetchDataForCriteria(String policyName) {
        FortressSecurityUtil ldapOps=new FortressSecurityUtil();
        if(policyName==null){
        policyName="";
        }
        return ldapOps.searchPasswordPolicies(policyName);
    }
}
