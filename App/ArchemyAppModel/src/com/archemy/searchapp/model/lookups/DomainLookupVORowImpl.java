package com.archemy.searchapp.model.lookups;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 10 14:53:59 EST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DomainLookupVORowImpl extends ViewRowImpl {
    public static final int ENTITY_DOMAINSEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DomainDescription {
            public Object get(DomainLookupVORowImpl obj) {
                return obj.getDomainDescription();
            }

            public void put(DomainLookupVORowImpl obj, Object value) {
                obj.setDomainDescription((String)value);
            }
        }
        ,
        DomainId {
            public Object get(DomainLookupVORowImpl obj) {
                return obj.getDomainId();
            }

            public void put(DomainLookupVORowImpl obj, Object value) {
                obj.setDomainId((Integer)value);
            }
        }
        ,
        DomainName {
            public Object get(DomainLookupVORowImpl obj) {
                return obj.getDomainName();
            }

            public void put(DomainLookupVORowImpl obj, Object value) {
                obj.setDomainName((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DomainLookupVORowImpl object);

        public abstract void put(DomainLookupVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DOMAINDESCRIPTION = AttributesEnum.DomainDescription.index();
    public static final int DOMAINID = AttributesEnum.DomainId.index();
    public static final int DOMAINNAME = AttributesEnum.DomainName.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DomainLookupVORowImpl() {
    }

    /**
     * Gets DomainsEO entity object.
     * @return the DomainsEO
     */
    public EntityImpl getDomainsEO() {
        return (EntityImpl)getEntity(ENTITY_DOMAINSEO);
    }

    /**
     * Gets the attribute value for DOMAIN_DESCRIPTION using the alias name DomainDescription.
     * @return the DOMAIN_DESCRIPTION
     */
    public String getDomainDescription() {
        return (String) getAttributeInternal(DOMAINDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DOMAIN_DESCRIPTION using the alias name DomainDescription.
     * @param value value to set the DOMAIN_DESCRIPTION
     */
    public void setDomainDescription(String value) {
        setAttributeInternal(DOMAINDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for DOMAIN_ID using the alias name DomainId.
     * @return the DOMAIN_ID
     */
    public Integer getDomainId() {
        return (Integer) getAttributeInternal(DOMAINID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOMAIN_ID using the alias name DomainId.
     * @param value value to set the DOMAIN_ID
     */
    public void setDomainId(Integer value) {
        setAttributeInternal(DOMAINID, value);
    }

    /**
     * Gets the attribute value for DOMAIN_NAME using the alias name DomainName.
     * @return the DOMAIN_NAME
     */
    public String getDomainName() {
        return (String) getAttributeInternal(DOMAINNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for DOMAIN_NAME using the alias name DomainName.
     * @param value value to set the DOMAIN_NAME
     */
    public void setDomainName(String value) {
        setAttributeInternal(DOMAINNAME, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
