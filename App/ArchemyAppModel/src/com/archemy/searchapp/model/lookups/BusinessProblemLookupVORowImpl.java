package com.archemy.searchapp.model.lookups;

import com.archemy.searchapp.model.entities.RecurringBusProblemEOImpl;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Dec 18 18:10:13 EST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BusinessProblemLookupVORowImpl extends ViewRowImpl {
  public static final int ENTITY_RECURRINGBUSPROBLEMEO = 0;

  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
   */
  public enum AttributesEnum {
    BusinessProblem {
      public Object get(BusinessProblemLookupVORowImpl obj) {
        return obj.getBusinessProblem();
      }

      public void put(BusinessProblemLookupVORowImpl obj, Object value) {
        obj.setBusinessProblem((String)value);
      }
    }
    ,
    Id {
      public Object get(BusinessProblemLookupVORowImpl obj) {
        return obj.getId();
      }

      public void put(BusinessProblemLookupVORowImpl obj, Object value) {
        obj.setId((Integer)value);
      }
    }
    ;
    private static AttributesEnum[] vals = null;
    private static int firstIndex = 0;

    public abstract Object get(BusinessProblemLookupVORowImpl object);

    public abstract void put(BusinessProblemLookupVORowImpl object, Object value);

    public int index() {
      return AttributesEnum.firstIndex() + ordinal();
    }

    public static int firstIndex() {
      return firstIndex;
    }

    public static int count() {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    public static AttributesEnum[] staticValues() {
      if (vals == null) {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }
  public static final int BUSINESSPROBLEM = AttributesEnum.BusinessProblem.index();
  public static final int ID = AttributesEnum.Id.index();

  /**
   * This is the default constructor (do not remove).
   */
  public BusinessProblemLookupVORowImpl() {
  }

  /**
   * Gets RecurringBusProblemEO entity object.
   * @return the RecurringBusProblemEO
   */
  public RecurringBusProblemEOImpl getRecurringBusProblemEO() {
    return (RecurringBusProblemEOImpl)getEntity(ENTITY_RECURRINGBUSPROBLEMEO);
  }

  /**
   * Gets the attribute value for BUSINESS_PROBLEM using the alias name BusinessProblem.
   * @return the BUSINESS_PROBLEM
   */
  public String getBusinessProblem() {
    return (String) getAttributeInternal(BUSINESSPROBLEM);
  }

  /**
   * Sets <code>value</code> as attribute value for BUSINESS_PROBLEM using the alias name BusinessProblem.
   * @param value value to set the BUSINESS_PROBLEM
   */
  public void setBusinessProblem(String value) {
    setAttributeInternal(BUSINESSPROBLEM, value);
  }

  /**
   * Gets the attribute value for ID using the alias name Id.
   * @return the ID
   */
  public Integer getId() {
    return (Integer) getAttributeInternal(ID);
  }

  /**
   * Sets <code>value</code> as attribute value for ID using the alias name Id.
   * @param value value to set the ID
   */
  public void setId(Integer value) {
    setAttributeInternal(ID, value);
  }

  /**
   * getAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param attrDef the attribute

   * @return the attribute value
   * @throws Exception
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
      return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

  /**
   * setAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param value the value to assign to the attribute
   * @param attrDef the attribute

   * @throws Exception
   */
  protected void setAttrInvokeAccessor(int index, Object value,
                                       AttributeDefImpl attrDef) throws Exception {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
      AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
      return;
    }
    super.setAttrInvokeAccessor(index, value, attrDef);
  }
}
